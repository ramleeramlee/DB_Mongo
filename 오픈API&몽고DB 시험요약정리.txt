[몽고DB]

1. noSQL, json {키:값},    db --> collection --> document --> item(항목, 필드)
		RDB		db --> table    --> row      --> column

2. document는 csv file, json file import할 수도 있고, json형태로 document 넣을 수 있음

3. 데이터 타입은 RDB가 더 많음

4. _id가 자동으로 모든 컬렉션에 생긴다

5. CRUD 할 수 있는 명령어 쳐서 결과를 보는 화면 프로그램 : 몽고쉘
	find({}) --> {}는 검색조건을 넣어주는 부분
	insertOne({})
	insertMany([{},{}]) >> 배열 사용
	updateOne >> 조건을 만족하는 document가 여러개 있다고 하더라도 updateOne은 하나의 document만 업데이트!!
	updateMany >>  updateMany는 여러개의 documents를 모두 업데이트!
	deleteOne
	deleteMany({})
	count() >> documents의 전체 개수
	sort() >> documents들 정렬할 때
	limit() >> 나타낼 documents의 개수 지정
	find({"age":100, "name":"hong"}) >> and조건(두 개다 만족하는 검색)
	find({"age":100}, {"age":1, "phone":1}) >> 앞에는 필터(조건) = where, 뒤에는 프로젝션(보여질 항목선택)

6. 분산환경에 적합, micro service 구조에 적합(msa), 인메모리방식, 스키마는 유동적일수록 좋다

7. 샤딩(일부분, 조각만 복제해서 사용)은 RDB, mongoDB에서 사용

8. 고가용성(가격대비 다양한 활용 가능), 반정형에 적합 // RDB는 정형

9. index(목차) >> pk로 설정하면 자동으로 목차를 만들어주고, 부가적인 목차생성도 가능하다 
			검색시 목차를 이용하면 속도가 빠르고 read작업시 유용하다

10. 몽고DB 클라이언트 프로그램 >> 몽고DB compass, 몽고DB Studio-3T
					단, compass는 몽고shell이 없어서 명령어 작성 불가능

11. 몽고DB와 java연동 >> 몽고DB 드라이버 파일, mongoTemplete(framework)파일 
				스프링에서 연동 할 땐 pom.xml에 dependency로 설정함
			  >> 몽고DB 연결할 때 필요한 데이터 : url(localhost), port(27017), user/pw 

[웹소켓 + openAPI]

1. 웹소켓으로 할 수 있는 것 >> 1:1, 1:n 채팅, 챗봇

2. 웹소켓?? >> 브라우저와 스프링프로젝트(톰킷)의 연결을 유지

3. openAPI >> 무료 + 유료
	ocr 서비스 : 그림, 사진을 주면 글자를 추출해줌(민증 글자를 추출해서 자동으로 넣어줌)
	네이버, 카카오, 날씨, 환율, 공공데이터, 결제 등등

4. openAPI에서 응답할 때 보통 사용하는 문서포맷 >> json, xml

5. 자연어 >> 사람이 쓰는 언어 <--> 기계어 >> 컴퓨터가 쓰는 언어



